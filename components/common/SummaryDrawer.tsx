
import React from 'react';
import { useQuery } from '@tanstack/react-query';
import ReactMarkdown from 'react-markdown';
import DOMPurify from 'dompurify';
import { fetchDailyBrief } from '../../services/api';
import { Brief } from '../../types';
import { LoadingSpinner } from '../ui/LoadingSpinner';
import { ErrorMessage } from '../ui/ErrorMessage';

interface SummaryDrawerProps {
  isOpen: boolean;
  onClose: () => void;
}

export const SummaryDrawer: React.FC<SummaryDrawerProps> = ({ isOpen, onClose }) => {
  const { data: briefData, error, isLoading, isFetching } = useQuery<Brief, Error>({
    queryKey: ['dailyBriefToday'],
    queryFn: fetchDailyBrief,
    enabled: isOpen, // Only fetch when the drawer is open
    staleTime: 15 * 60 * 1000, // 15 minutes
  });

  const cleanMarkdown = (markdown: string): string => {
    // DOMPurify is generally for HTML, but can be used if markdown might contain embedded HTML.
    // For pure markdown, this step might be optional or could use a markdown-specific sanitizer.
    // However, react-markdown itself has some XSS protection.
    // This is an extra layer if the markdown source is untrusted and could have HTML.
    return DOMPurify.sanitize(markdown);
  };

  if (!isOpen) {
    return null;
  }

  return (
    <>
      {/* Overlay */}
      <div 
        className="fixed inset-0 bg-black bg-opacity-75 z-40 transition-opacity duration-300 ease-in-out"
        onClick={onClose}
        aria-hidden="true"
      />
      
      {/* Drawer */}
      <aside 
        className={`fixed top-0 right-0 h-full w-full md:w-1/2 lg:w-1/3 bg-brand-surface shadow-2xl z-50 transform transition-transform duration-300 ease-in-out ${
          isOpen ? 'translate-x-0' : 'translate-x-full'
        }`}
        role="dialog"
        aria-modal="true"
        aria-labelledby="summary-drawer-title"
      >
        <div className="flex flex-col h-full">
          <header className="flex items-center justify-between p-4 border-b border-brand-border sticky top-0 bg-brand-surface z-10">
            <h2 id="summary-drawer-title" className="text-xl font-semibold text-brand-text-primary">
              Daily Intelligence Brief
            </h2>
            <button 
              onClick={onClose} 
              className="p-2 rounded-full hover:bg-brand-surface-alt text-brand-text-secondary focus:outline-none focus:ring-2 focus:ring-brand-accent"
              aria-label="Close summary drawer"
            >
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </header>

          <div className="flex-grow p-6 overflow-y-auto">
            {isFetching && <div className="absolute top-4 right-16 opacity-75"><LoadingSpinner /></div>}
            {isLoading && !briefData && <div className="flex justify-center items-center h-full"><LoadingSpinner /></div>}
            {error && <ErrorMessage message={error.message || "Failed to load daily brief."} details="Please try again later."/>}
            
            {briefData && (
              <div>
                <p className="text-sm text-brand-text-secondary mb-2">
                  Brief for: {new Date(briefData.date).toLocaleDateString()}
                </p>
                <article className="prose prose-sm prose-invert max-w-none text-brand-text-primary 
                                    prose-headings:text-brand-text-primary prose-a:text-brand-secondary 
                                    prose-strong:text-brand-text-primary prose-code:text-brand-accent
                                    prose-blockquote:border-brand-accent prose-blockquote:text-brand-text-secondary">
                  <ReactMarkdown>{cleanMarkdown(briefData.markdown)}</ReactMarkdown>
                </article>
                
                {/* Optionally display raw JSON for debugging or specific needs */}
                {/* <details className="mt-6">
                  <summary className="cursor-pointer text-sm text-brand-text-secondary">View Raw JSON Data</summary>
                  <pre className="mt-2 p-3 bg-brand-surface-alt text-xs text-brand-text-primary rounded overflow-x-auto">
                    {JSON.stringify(briefData.json, null, 2)}
                  </pre>
                </details> */}
              </div>
            )}
            {!isLoading && !briefData && !error && (
                <p className="text-brand-text-secondary">No brief available for today.</p>
            )}
          </div>
          <footer className="p-4 border-t border-brand-border text-xs text-brand-text-secondary text-center sticky bottom-0 bg-brand-surface z-10">
            Summary generated by Gemini AI.
          </footer>
        </div>
      </aside>
    </>
  );
};